import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe")
        self.root.resizable(False, False)
        self.current_player = "X"
        self.buttons = [[None]*3 for _ in range(3)]

        self.build_grid()
        self.status_label = tk.Label(self.root, text="Player X's turn", font=('Arial', 14))
        self.status_label.pack(pady=10)

    def build_grid(self):
        frame = tk.Frame(self.root)
        frame.pack()
        for row in range(3):
            for col in range(3):
                btn = tk.Button(frame, text="", font=('Arial', 24), width=5, height=2,
                                command=lambda r=row, c=col: self.make_move(r, c))
                btn.grid(row=row, column=col)
                self.buttons[row][col] = btn

        reset_btn = tk.Button(self.root, text="Reset Game", font=('Arial', 12),
                              bg="orange", command=self.reset_game)
        reset_btn.pack(pady=10)

    def make_move(self, row, col):
        btn = self.buttons[row][col]
        if btn["text"] == "" and not self.check_winner():
            btn["text"] = self.current_player
            if self.check_winner():
                self.status_label.config(text=f"ðŸŽ‰ Player {self.current_player} wins!")
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
            elif self.is_draw():
                self.status_label.config(text="It's a draw!")
                messagebox.showinfo("Game Over", "It's a draw!")
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
                self.status_label.config(text=f"Player {self.current_player}'s turn")

    def check_winner(self):
        board = [[btn["text"] for btn in row] for row in self.buttons]
        # Check rows and columns
        for i in range(3):
            if board[i][0] == board[i][1] == board[i][2] != "":
                return True
            if board[0][i] == board[1][i] == board[2][i] != "":
                return True
        # Check diagonals
        if board[0][0] == board[1][1] == board[2][2] != "":
            return True
        if board[0][2] == board[1][1] == board[2][0] != "":
            return True
        return False

    def is_draw(self):
        return all(self.buttons[r][c]["text"] != "" for r in range(3) for c in range(3))

    def reset_game(self):
        self.current_player = "X"
        self.status_label.config(text="Player X's turn")
        for row in self.buttons:
            for btn in row:
                btn.config(text="")


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
